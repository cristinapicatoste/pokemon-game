{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","props","number","id","name","type","exp","imgSrc","slice","className","src","alt","Pokedex","winner","isWinner","pokemon","map","key","base_experience","Pokegame","player1","player2","length","randomIndex","Math","floor","random","randomPokemon","splice","push","experiencePlayer1","reduce","a","b","experiencePlayer2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAmBeA,G,UAbE,SAACC,GAAW,IAFZC,EAGPC,EAAwBF,EAAxBE,GAAIC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,KAAMC,EAAQL,EAARK,IACpBC,EAAM,UALI,8DAKJ,QAJKL,EAIqBC,IAJC,IAAM,YAAKD,GAASM,OAAO,GAAKN,EAI3D,QACV,OACE,yBAAKO,UAAU,sBACb,4BAAKL,GACL,yBAAKK,UAAU,eAAeC,IAAKH,EAAQI,IAAKP,IAChD,uBAAGK,UAAU,qBAAb,SAAwCJ,GACxC,uBAAGI,UAAU,qBAAb,QAAuCH,MCoB9BM,G,MA9BC,SAACX,GAAW,IAEtBY,EADIC,EAA2Bb,EAA3Ba,SAAUC,EAAiBd,EAAjBc,QAAST,EAAQL,EAARK,IAQ3B,OALEO,EADEC,EACO,wBAAIL,UAAU,qBAAd,WAEA,wBAAIA,UAAU,oBAAd,UAIT,6BACE,gDACoB,gCAASH,IAE5BO,EACD,yBAAKJ,UAAU,qBACZM,EAAQC,KAAI,SAACD,GAAD,OACX,kBAAC,EAAD,CACEE,IAAKF,EAAQZ,GACbA,GAAIY,EAAQZ,GACZC,KAAMW,EAAQX,KACdC,KAAMU,EAAQV,KACdC,IAAKS,EAAQG,yBCkBVC,G,MAxCE,SAAClB,GAchB,IAbA,IAWImB,EAAU,GACVC,EAAO,UAZK,CACd,CAAElB,GAAI,EAAGC,KAAM,aAAcC,KAAM,OAAQa,gBAAiB,IAC5D,CAAEf,GAAI,EAAGC,KAAM,WAAYC,KAAM,QAASa,gBAAiB,IAC3D,CAAEf,GAAI,GAAIC,KAAM,UAAWC,KAAM,MAAOa,gBAAiB,IACzD,CAAEf,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUa,gBAAiB,KAC/D,CAAEf,GAAI,GAAIC,KAAM,UAAWC,KAAM,WAAYa,gBAAiB,KAC9D,CAAEf,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUa,gBAAiB,IAC/D,CAAEf,GAAI,GAAIC,KAAM,SAAUC,KAAM,SAAUa,gBAAiB,KAC3D,CAAEf,GAAI,IAAKC,KAAM,QAASC,KAAM,SAAUa,gBAAiB,MAKtDE,EAAQE,OAASD,EAAQC,QAAQ,CACtC,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQC,QACjDK,EAAgBN,EAAQO,OAAOL,EAAa,GAAG,GACnDH,EAAQS,KAAKF,GAEf,IAAMG,EAAoBV,EAAQW,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAEf,kBAAiB,GACpEgB,EAAoBb,EAAQU,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAEf,kBAAiB,GAE1E,OACE,6BACE,wCACA,kBAAC,EAAD,CACEH,QAASK,EACTd,IAAKwB,EACLhB,SAAUgB,EAAoBI,IAEhC,wCACA,kBAAC,EAAD,CACEnB,QAASM,EACTf,IAAK4B,EACLpB,SAAUoB,EAAoBJ,OCvBvBK,G,MAXH,WACV,OACE,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,UAAd,iBACA,kBAAC,EAAD,UCGY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.32c76bf9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Pokecard.css\";\n\nconst img_API = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\nlet idToThree = (number) => (number <= 999 ? `00${number}`.slice(-3) : number);\n\nconst Pokecard = (props) => {\n  const { id, name, type, exp } = props;\n  let imgSrc = `${img_API}${idToThree(id)}.png`;\n  return (\n    <div className=\"Pokecard-container\">\n      <h3>{name}</h3>\n      <img className=\"Pokecard-img\" src={imgSrc} alt={name}></img>\n      <p className=\"Pokecard-features\">Type: {type}</p>\n      <p className=\"Pokecard-features\">Exp: {exp}</p>\n    </div>\n  );\n};\n\nexport default Pokecard;\n","import React from \"react\";\nimport Pokecard from \"./Pokecard\";\nimport \"./Pokedex.css\";\n\nconst Pokedex = (props) => {\n  const { isWinner, pokemon, exp } = props;\n  let winner;\n  if (isWinner) {\n    winner = <h1 className=\"Pokedex-h1-winner\">WINNER!</h1>;\n  } else {\n    winner = <h1 className=\"Pokedex-h1-loser\">LOSER!</h1>;\n  }\n\n  return (\n    <div>\n      <p>\n        Total experience: <strong>{exp}</strong>\n      </p>\n      {winner}\n      <div className=\"Pokedex-container\">\n        {pokemon.map((pokemon) => (\n          <Pokecard\n            key={pokemon.id}\n            id={pokemon.id}\n            name={pokemon.name}\n            type={pokemon.type}\n            exp={pokemon.base_experience}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Pokedex;\n","import React from \"react\";\nimport Pokedex from \"./Pokedex\";\nimport \"./Pokegame.css\";\n\nconst Pokegame = (props) => {\n  const pokemon = [\n    { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n    { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n    { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n    { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n    { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n    { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n    { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n    { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 },\n  ];\n\n  let player1 = [];\n  let player2 = [...pokemon];\n  while (player1.length < player2.length) {\n    let randomIndex = Math.floor(Math.random() * player2.length);\n    let randomPokemon = player2.splice(randomIndex, 1)[0];\n    player1.push(randomPokemon);\n  }\n  const experiencePlayer1 = player1.reduce((a, b) => a + b.base_experience, 0);\n  const experiencePlayer2 = player2.reduce((a, b) => a + b.base_experience, 0);\n\n  return (\n    <div>\n      <h2>Player 1</h2>\n      <Pokedex\n        pokemon={player1}\n        exp={experiencePlayer1}\n        isWinner={experiencePlayer1 > experiencePlayer2}\n      />\n      <h2>Player 2</h2>\n      <Pokedex\n        pokemon={player2}\n        exp={experiencePlayer2}\n        isWinner={experiencePlayer2 > experiencePlayer1}\n      />\n    </div>\n  );\n};\n\nexport default Pokegame;\n","import React from \"react\";\nimport Pokegame from \"./Pokegame\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-h1\">POKECARD GAME</h1>\n        <Pokegame />\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}